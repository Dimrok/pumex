#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct AssetType
{
  vec4  bbMin;
  vec4  bbMax;
  uint  lodFirst;
  uint  lodSize;
};

struct AssetLOD
{
  uint  geomFirst;
  uint  geomSize;
  float minDistance;
  float maxDistance;
};

struct AssetGeometry
{
  uint  indexCount;
  uint  firstIndex;
  uint  vertexOffset;
  uint  padding;
};

struct StaticInstanceData
{
  uvec4 id;
  vec4  params;
  mat4  position;
};

struct DrawIndexedIndirectCommand
{
  uint  indexCount;
  uint  instanceCount;
  uint  firstIndex;
  uint  vertexOffset;
  uint  firstInstance;
};

layout (local_size_x = 16) in;

// binding 0,0 : camera
layout (set = 0, binding = 0) uniform CameraUbo
{
  mat4  viewMatrix;
  mat4  viewMatrixInverse;
  mat4  projectionMatrix;
  vec4  observerPosition;
  float currentTime;
} camera;

// Binding 0,1 : information about types
layout(set = 0, binding = 1) readonly buffer types
{
  AssetType assetTypes[];
};

// Binding 0,2 : information about type lods
layout(set = 0, binding = 2) readonly buffer lods
{
  AssetLOD assetLods[];
};

// Binding 0,3 : output DrawIndexedIndirectCommands
layout (set = 0, binding = 3) buffer DrawCommands
{
  DrawIndexedIndirectCommand drawCommands[];
};

// Binding 0,4 : output instances
layout (set = 0, binding = 4) buffer OutInstanceDataSbo
{
  StaticInstanceData outInstances[];
};

//
layout (set = 0, binding = 5) buffer ResultIndexSbo
{
  uint instanceIndices[];
};

layout (set = 0, binding = 6) buffer ResultCounterSbo
{
  uint instanceCounter;
};

// Binding 1,0 : input instances
layout (set = 1, binding = 0) readonly buffer InInstanceDataSbo
{
  StaticInstanceData inInstances[];
};

bool boundingBoxInViewFrustum( in mat4 matrix, in vec4 bbMin, in vec4 bbMax )
{
  vec4 BoundingBox[8];
  BoundingBox[0] = matrix * vec4( bbMax.x, bbMax.y, bbMax.z, 1.0);
  BoundingBox[1] = matrix * vec4( bbMin.x, bbMax.y, bbMax.z, 1.0);
  BoundingBox[2] = matrix * vec4( bbMax.x, bbMin.y, bbMax.z, 1.0);
  BoundingBox[3] = matrix * vec4( bbMin.x, bbMin.y, bbMax.z, 1.0);
  BoundingBox[4] = matrix * vec4( bbMax.x, bbMax.y, bbMin.z, 1.0);
  BoundingBox[5] = matrix * vec4( bbMin.x, bbMax.y, bbMin.z, 1.0);
  BoundingBox[6] = matrix * vec4( bbMax.x, bbMin.y, bbMin.z, 1.0);
  BoundingBox[7] = matrix * vec4( bbMin.x, bbMin.y, bbMin.z, 1.0);

  int outOfBound[6] = int[6]( 0, 0, 0, 0, 0, 0 );
  for (int i=0; i<8; i++)
  {
    outOfBound[0] += int( BoundingBox[i].x >  BoundingBox[i].w );
    outOfBound[1] += int( BoundingBox[i].x < -BoundingBox[i].w );
    outOfBound[2] += int( BoundingBox[i].y >  BoundingBox[i].w );
    outOfBound[3] += int( BoundingBox[i].y < -BoundingBox[i].w );
    outOfBound[4] += int( BoundingBox[i].z >  BoundingBox[i].w );
    outOfBound[5] += int( BoundingBox[i].z < -BoundingBox[i].w );
  }
  return (outOfBound[0] < 8 ) && ( outOfBound[1] < 8 ) && ( outOfBound[2] < 8 ) && ( outOfBound[3] < 8 ) && ( outOfBound[4] < 8 ) && ( outOfBound[5] < 8 );
}

void main() 
{
  uint inInstanceIndex = gl_GlobalInvocationID.x;
  if (inInstanceIndex >= inInstances.length()) 
    return;	
  uint typeIndex     = inInstances[inInstanceIndex].id[1];
  mat4 modelMatrix   = inInstances[inInstanceIndex].position;
  mat4 mvpMatrix     = camera.projectionMatrix * camera.viewMatrix * modelMatrix;
  if( boundingBoxInViewFrustum( mvpMatrix, assetTypes[typeIndex].bbMin, assetTypes[typeIndex].bbMax ) )
  {
    uint currentInstance = atomicAdd( instanceCounter, 1);
    outInstances[currentInstance].position = inInstances[inInstanceIndex].position;
    outInstances[currentInstance].id       = inInstances[inInstanceIndex].id;
    outInstances[currentInstance].params   = inInstances[inInstanceIndex].params;

    float distanceToObject = distance(camera.observerPosition.xyz / camera.observerPosition.w, modelMatrix[3].xyz / modelMatrix[3].w );

    for( uint l = assetTypes[typeIndex].lodFirst; l<assetTypes[typeIndex].lodFirst + assetTypes[typeIndex].lodSize; ++l)
    {
      if( distanceToObject >= assetLods[l].minDistance && distanceToObject < assetLods[l].maxDistance )
      {
        for( uint g=assetLods[l].geomFirst; g<assetLods[l].geomFirst + assetLods[l].geomSize; ++g )
        {
          uint currentGeomInstance = atomicAdd( drawCommands[g].instanceCount, 1);
          instanceIndices[ drawCommands[g].firstInstance + currentGeomInstance ] = currentInstance;
        }
      }
    }
  }
}
